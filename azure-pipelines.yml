# ==========================================
# PIPELINE CI/CD para Node.js + React (Vite) -> Deploy a Azure App Service
# ==========================================

trigger:
  branches:
    include:
      - dev
      - main

pool:
  vmImage: ubuntu-latest

# NO definir NODE_ENV globalmente
# variables:
#  NODE_ENV: production

stages:
# ======================
# 1Ô∏è‚É£ BUILD STAGE
# ======================
- stage: Build
  displayName: 'Build Stage'
  jobs:
  - job: BuildJob
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '20.x'
      displayName: 'Install Node.js 20'

    - script: |
        node -v
        npm -v
        echo "--- Cleaning npm cache and node_modules ---"
        npm cache clean --force
        rm -rf node_modules
        echo "--- Running npm ci ---"
        npm ci
        echo "--- npm ci finished ---"
        echo "--- Running build ---"
        npx vite build
      displayName: 'Clean, Install Dependencies and Build App'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: 'dist'
        ArtifactName: 'drop'
      displayName: 'Publish Build Artifacts'

# ======================
# 2Ô∏è‚É£ TEST STAGE
# ======================
- stage: Test
  dependsOn: Build
  displayName: 'Test Stage'
  jobs:
  - job: TestJob
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '20.x'
      displayName: 'Install Node.js 20 (for Test)'

    - script: |
        echo "--- Installing dependencies for tests ---"
        npm ci
        echo "--- Running tests ---"
        npm test
      displayName: 'Install Deps & Run Tests'

    - task: PublishTestResults@2
      displayName: 'Publish Test Results JUnit'
      condition: always()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/junit.xml'
        failTaskOnFailedTests: true

# ======================
# 3Ô∏è‚É£ DEPLOY STAGE to Azure App Service
# ======================
- stage: Deploy
  dependsOn: Test
  condition: succeeded()
  displayName: 'Deploy Stage to Azure App Service'
  jobs:
  - deployment: DeployWeb
    environment: 'staging'
    strategy:
      runOnce:
        deploy:
          steps:
          # Descargar artefactos del stage de Build
          - task: DownloadBuildArtifacts@1
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'drop'
              # Descarga a una carpeta espec√≠fica para la tarea de despliegue
              downloadPath: '$(System.ArtifactsDirectory)/app'
            displayName: 'Download Build Artifacts for Deployment'

          # --- TAREA PARA DESPLEGAR A AZURE APP SERVICE ---
          - task: AzureWebApp@1
            displayName: 'Deploy to Azure App Service (staging)'
            inputs:
              # üëá Usa el nombre correcto de tu Conexi√≥n de Servicio
              azureSubscription: 'allenare'
              # üëá Ajusta si usas Windows App Service ('webApp')
              appType: 'webAppLinux'
              # üëá **CAMBIO 1:** Reemplaza con el nombre EXACTO de tu App Service en Azure
              appName: 'allenare'
              # üëá Ruta a la carpeta con los archivos construidos
              package: '$(System.ArtifactsDirectory)/app/drop'
              # deploymentMethod: 'auto' # Generalmente 'auto' o 'zipDeploy' funcionan bien

          # --- PASO PARA CERRAR WORK ITEMS ESPEC√çFICOS (sin cambios respecto al anterior de App Service) ---
          - task: AzureCLI@2
            displayName: 'Close Deployed Work Items (31, 33, 36)'
            condition: succeeded()
            inputs:
              # üëá Usa el mismo nombre de conexi√≥n de servicio
              azureSubscription: 'allenare'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              addSpnToEnvironment: true
              inlineScript: |
                echo "Closing specified Work Items after successful deployment..."
                WORK_ITEM_IDS_TO_CLOSE=(31 33 36)
                # üëá Verifica que 'Closed' sea el estado correcto en Azure Boards
                TARGET_STATE="Closed"
                for WORK_ITEM_ID in "${WORK_ITEM_IDS_TO_CLOSE[@]}"; do
                  echo "Attempting to update Work Item ID: $WORK_ITEM_ID to state '$TARGET_STATE'"
                  az boards work-item update --id $WORK_ITEM_ID --state "$TARGET_STATE" --org "$(System.TeamFoundationCollectionUri)" --project "$(System.TeamProject)" --debug || echo "Warning: Failed to update work item $WORK_ITEM_ID."
                done
                echo "Finished attempting to close specified work items."

# ======================
# 4Ô∏è‚É£ MONITOR STAGE (Opcional/Ejemplo) YA ES ESTE AAAA
# ======================
- stage: Monitor
  dependsOn: Deploy
  condition: succeeded()
  displayName: 'Monitor Stage'
  jobs:
  - job: MonitorJob
    steps:
    - script: |
        echo "--- Performing health check ---"
        # üëá **CAMBIO 2:** Reemplaza con la URL P√öBLICA de tu App Service desplegada
        curl -f -I https://allenare.azurewebsites.net || (echo "ERROR: Site unreachable or returned an error status" && exit 1)
        echo "Health check passed!"
      displayName: 'Check Deployment Health'